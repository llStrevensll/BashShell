
------------------
======
1. Hello bash Scripting
======
cat /etc/shells         //shells available in your system

/bin/sh
/bin/bash
/usr/bin/bash
/bin/rbash
/usr/bin/rbash
/bin/dash
/usr/bin/dash
/usr/bin/tmux
/usr/bin/screen

which bash
  /usr/bin/bash

nano helloScript.sh
 echo "helloo"

ls -al
chmod +x helloScript.sh        //color change to green
./helloScript.sh

=====
2. Redirect to file
=====
cat > file.txt
cat >> file.txt

=====
3. Comments
=====

one-line
#one-line comment

multiple-line
: ' 
 multiple
liness  '

//doc delimeter
cat << kreativ
this is hello creative text
add another line
kreativ

======
4. Conditional Statements
======
//Dejar espacio entre los corchetes [ ss ]
#if [ $count -eq 9 ]  -equal
#if [ $count -ne 9 ]  -noequal
if [ $count -gt 9]    -greater than
if (( $count > 9 ))
then
        echo "the condition is true"
else
        echo "the condition is false"
fi


if [ "$age" -gt 15 ] && [ "$age" -lt 32 ]
if [[ "$age" -gt 15  &&  "$age" -lt 32 ]]


#Case

car=$1

case $car in
    "BMW" )
        echo "It's BMW" ;;
    "MERCEDES" )
        echo "It's MERCEDES"  ;;
    "TOYOTA" )
        echo "It's TOYOTA" ;;
    "HONDA" )
        echo "IT's HONDA" ;;
     * )
        echo "Unknown car name"  ;;
esac


#Arguments
https://bash.cyberciti.biz/guide/$1

#!/bin/bash
script="$0"
first="$1"
second="$2"
tenth="${10}"
echo "The script name : $script"
echo "The first argument :  $first"
echo "The second argument : $second"
echo "The tenth and eleventh argument : $tenth and ${11}"

chmod +x demo-args.sh
./demo-args.sh foo bar one two a b c d e f z f z h


==========
5. Loops
==========
#! /bin/bash

number=1

echo "loops: while - until "
#while [ $number -lt 10 ]
until [ $number -ge 10 ]
do
        echo "$number"
        number=$(( number+1 ))
done

echo "for: "
for i in 1 2 3 4 5
do
        echo $i
done

echo "for: {start..ending..increment}"
for i in {0..20..2}
do
        echo $i
done

echo "for: clasic i=0;i<=10:i++ - break"
for (( i=0; i<=10; i++ ))
do
        if [ $i -gt 5 ]
        then
                echo "conditional break"
                break
        fi
        echo $i
done

echo "for: clasic i=0;i<=10:i++ - continue"
for (( i=0; i<=10; i++ ))
do
        if [ $i -eq 3 ] || [ $i -eq 7 ]
        then
                echo "conditional continue"
                continue
        fi
        echo $i
done

==========
6. Script input    - STDIN
==========
https://swcarpentry.github.io/shell-novice/06-script/index.html

usamos la variable especial $@, que significa 'Todos los argumentos de la línea de comandos para el script de shell'. 
También debemos poner $@entre comillas dobles para manejar el caso de argumentos que contienen espacios ( "$@"es una sintaxis especial y es equivalente a"$1" "$2" …).


#!/bin/bash

#echo $0 $1 $2 $3
: '
args=("$@")

echo ${args[0]} ${args[1]} ${args[2]}

echo $@
echo $#  '

while read line
do
        echo "$line"
done < "${1:-/dev/stdin}"

---
./Scriptinput-output.sh file1




https://blog.carreralinux.com.ar/2017/07/descriptores-de-archivo-stdin-stdout-stderr/
https://unix.stackexchange.com/questions/400849/echo-or-print-dev-stdin-dev-stdout-dev-stderr

==========
7. Script output    - STDOUT, STDERR
==========
#OUTPUT

#ls -al 1>file1.txt 2>file2.txt    #1-stdout , 2-stderr
#ls -al >file1.txt
#ls +al >file1.txt 2>&1
ls +al >& file1.txt


==========
9. Pipes  -  Send output from one script to another script
==========

MESSAGE="Hello LinuxHint Audience"
export MESSAGE
./secondScript.sh

---
echo "The message from the firstScript is:  $MESSAGE"
--

https://linuxize.com/post/how-to-compare-strings-in-bash/


echo "enter 1st string"
read st1

echo "enter 2st string"
read st2

c=$st1$st2
echo $c
echo ${st1^}  #minuscula
echo ${st2^^} #mayuscula
echo ${st1^l} #primera letra 'l' en mayuscula

#if [ "$st1" == "$st2" ]
if [ "$st1" \< "$st2" ]
then
        echo "$st1 is smaller than $st2"
elif [ "$st1" \> "$st2" ]
then
        echo "$st2 is smaller than $st1"
else
        echo "both strings are equal"
fi

==========
10. Numbers and Arithmetic
==========

#! /bin/bash

echo 31+21

n1=4
n2=20

echo $((n1 + n2))
echo $((n1 - n2))
echo $((n1 * n2))
echo $((n1 / n2))
echo $((n1 % n2))

echo "expr"
echo $(expr $n1 + $n2)
echo $(expr $n1 - $n2)
echo $(expr $n1 \* $n2)     #expr doesn't recognize the static sign, so we have to add a slash
echo $(expr $n1 / $n2)
echo $(expr $n1 % $n2)

echo "Enter Hex Number of your choice"
read Hex

echo -n "The decimal value of $Hex is : "

echo "obase=10; ibase=16; $Hex" | bc            #bc - basic calculator

========
11-Declare Command
========
declare -p
declare myvariable=22
--
#! /bin/bash

declare -r pwdfile=/etc/passwd  #-r read

echo $pwdfile

pwdfile=/etc/abc.txt
---


/etc/passwd
./declareCommand.sh: line 7: pwdfile: readonly variable
========
12-Arrays
========

#!/bin/bash

car=('BMW' 'Toyota' 'Honda' 'Ferrari')


unset car[2]  #delete
#echo "${car[2]}"
car[2]='Mercedes'  #replace


#All items
echo "${car[@]}"

#Content of item
echo "${car[0]}"

#Positition in array
echo "${!car[@]}"

#Lenght items
echo "${#car[@]}"

========
13.Functions
========
Functions

#! /bin/bash

function funcPrint()
{
        echo $1 $2 $3 $4

}

function funcCheck()
{
        returningValue="I love linux"
}

funcPrint Hi i am Angel


returningValue="I love MAC"
echo $returningValue

funcCheck
echo $returningValue
--

========
14.Files and Directories
========

Multilecomments block
https://linuxhandbook.com/comments-bash-script/

$IFS
https://bash.cyberciti.biz/guide/$IFS

#!bin/bash

#mkdir -p Directory2

if [ -d "$direct" ]
then
        echo "$direct exists"
else
        echo "$direct doesn't exists"
fi


echo "Enter the file name to create"
read fileName

touch $fileName


echo "Enter filename to check"
read fileName

if [[ -f "$fileName" ]]
then
        echo "$fileName exists"
else
        echo "$fileName doesn't exist"
fi


echo "Enter the text that you want to append"
read fileName

if [[ -f "$fileName" ]]
then
        echo "Enter the text that want to append"
        read fileText
        echo "$fileText" >> $fileName
else
        echo "$fileName doesn't exist"
fi

echo "Enter the filename from which you want to read"
read fileName

if [[ -f "$fileName" ]]
then
        while IFS= read -r line    #IFS= -(whitespace)  Internal Field Separator
        do
                echo "$line"
        done < $fileName
else
        echo "$fileName doesn't exist"
fi

echo "remove"
if [[ -f "$fileName" ]]
then
        rm $fileName
        echo "file has been deleted successfully"
else
        echo "$fileName doesn't exist"
fi


=======
15-Send Email Via Script
=======

sudo apt install ssmtp

//EN GMAIL Security-Habilitar acceso a apps menos seguras  - ON

sudo nano /etc/ssmtp/ssmtp.conf

root=emailtest@gmail.com
mailhub=smtp.gmail.com:587
AuthUser=emailtest@gmail.com
AuthPass=password
UseSTARTTLS=yes



./email.sh

To: emailtest@gmail.com
From: emailtest@gmail.com
Cc: emailtest@gmail.com
Subject: TEST
This is body

=======
15-Curl in Scripts
=======
#! /bin/bash

url="http://www.ovh.net/files/1Mio.dat"

#-O  - output download in present folder
#curl ${url} -O

#-o change name file what is going to download
#curl ${url} -o NewFileDW
#curl ${url} > outputfile

#-I information
curl -I ${url}


======
17-Professional Menus
======

#! /bin/bash
<<Block_comment
select car in TOYOTA MERCEDES RENAULT HYUNDAI BMW TESLA
do
        echo "You have selected $car"
done
Block_comment

<<Block_comment
select car in TOYOTA MERCEDES RENAULT HYUNDAI BMW TESLA
do
        case $car in
        TOYOTA)
                echo "TOYOTA SELECTED";;
        MERCEDES)
                echo "MERCEDES SELECTED";;
        RENAULT)
                echo "RENAULT SELECTED";;
        HYUNDAI)
                echo "HYUNDAI SELECTED";;
        BMW)
                echo "BMW SELECTED";;
        TESLA)
                echo "TESLA SELECTED";;
        *)
                echo "ERROR! Please select between 1..5";;
        esac
done
Block_comment

echo "press any key to continue"
while [ true ]
do
        read -t 3 -n 1     #-t  time every 3 seconds it is going to print out a statement
if [ $? = 0 ]
then
        echo "you have terminated the script"
        exit;
else
        echo "waiting for you to press the key sir!!"
fi


======
18-Wait for filesystem events with inotify
======

#! /bin/bash

mkdir -p temp/NewFolder
inotifywait -m temp/NewFolder


======
19-Introduction to grep
======

#! /bin/bash

echo "Enter filename to search text from"
read fileName

if [[ -f $fileName ]]
then
        echo "Enter the text to search"
        read grepvar
        grep -i -v  $grepvar $fileName      #-i remove case sensitivity  -v without word -n number -c count
else
        echo "$fileName doesn't exist"
fi


======
20-Introduction to awk
======
Manipulating data and generating reports

#! /bin/bash

echo "Enter filename to print from awk"
read fileName

if [[ -f $fileName ]]
then
        #awk '{print}' $fileName
        awk '/Windows/ {print $3,$4}' $fileName    # $4 cuarta parlabra
else
        echo "$fileName doesn't exist"
fi


======
21-Introduction to sed
======

#! /bin/bash

echo "Enter filename to substitute using sed"
read fileName

if [[ -f $fileName ]]
then
                                         #replace first character
        #cat $fileName | sed 's/i/I/g'    #replace all    g
        sed 's/i/I/g' $fileName > newfile.txt
else
        echo "$fileName doesn't exist"
fi

======
22- Debugging bash scripts
======



